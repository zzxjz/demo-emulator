package opengl

import (
	"fmt"

	"github.com/zzxjz/demo-emulator/gb/util"
	"github.com/go-gl/gl/v2.1/gl"
)

var (
	texture          uint32
	colorFrameBuffer []uint8
)

// Setup initializes OpenGL
func Setup(fb []uint8) {

	// a reference to the array of pixels generated by the
	// emulator that will be presented on the screen
	colorFrameBuffer = fb

	if err := gl.Init(); err != nil {
		panic(err)
	}

	fmt.Println("gl init ok")

	// enable textures and create one texture to dump the contents
	// of the emulator frame buffer
	// this texture has the same size as the Game Boy screen
	gl.Enable(gl.TEXTURE_2D)
	gl.GenTextures(1, &texture)
	gl.BindTexture(gl.TEXTURE_2D, texture)
	gl.TexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, util.GbWidth, util.GbHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, gl.Ptr(&colorFrameBuffer[0]))

	fmt.Println("gl setup ok")
}

// Render draws the current frame
func Render() {

	// bind the texture we create before and transfer
	// the contents of the emulator frame buffer to it
	// this way the texture will store the updated pixels
	// of the frame buffer
	gl.BindTexture(gl.TEXTURE_2D, texture)
	gl.TexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, util.GbWidth, util.GbHeight, gl.RGBA, gl.UNSIGNED_BYTE, gl.Ptr(&colorFrameBuffer[0]))

	// disable any filtering to avoid bluring the texture
	gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)
	gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)

	// set an orthogonal projection (2D) with the size of
	// the Game Boy Screen
	gl.MatrixMode(gl.PROJECTION)
	gl.LoadIdentity()
	gl.Ortho(0.0, util.GbWidth, 0.0, util.GbHeight, -1.0, 1.0)
	gl.MatrixMode(gl.MODELVIEW)

	// render a single quad with the size of the Game Boy
	// screen and with the contents of the emulator
	// frame buffer (already in the texture)
	gl.Begin(gl.QUADS)
	gl.TexCoord2d(0.0, 1.0)
	gl.Vertex2d(0.0, 0.0)
	gl.TexCoord2d(1.0, 1.0)
	gl.Vertex2d(util.GbWidth, 0.0)
	gl.TexCoord2d(1.0, 0.0)
	gl.Vertex2d(util.GbWidth, util.GbHeight)
	gl.TexCoord2d(0.0, 0.0)
	gl.Vertex2d(0.0, util.GbHeight)
	gl.End()
}

// Teardown shut downs OpenGL
func Teardown() {
	gl.DeleteTextures(1, &texture)
}
